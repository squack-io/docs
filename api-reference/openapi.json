{
  "openapi": "3.0.1",
  "info": {
    "title": "Relace API",
    "description": "API for accessing Relace code generation models.",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://instantapply.endpoint.relace.run",
      "description": "Server for code application endpoints"
    },
    {
      "url": "https://ranker.endpoint.relace.run",
      "description": "Server for code ranking endpoints"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/code/apply": {
      "post": {
        "description": "Merge code snippets from an LLM into your existing codebase.",
        "servers": [
          {
            "url": "https://instantapply.endpoint.relace.run"
          }
        ],
        "requestBody": {
          "description": "Initial code and edits to apply",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstantApplyRequest"
              },
              "example": {
                "initialCode": "function calculateTotal(items) {\n  let total = 0;\n  \n  for (const item of items) {\n    total += item.price * item.quantity;\n  }\n  \n  return total;\n}",
                "editSnippet": "// ... keep existing code\n\nfunction applyDiscount(total, discountRules) {\n  let discountedTotal = total;\n  \n  if (discountRules.percentOff) {\n    discountedTotal -= (total * discountRules.percentOff / 100);\n  }\n  \n  if (discountRules.fixedAmount && discountRules.fixedAmount < discountedTotal) {\n    discountedTotal -= discountRules.fixedAmount;\n  }\n  \n  return Math.max(0, discountedTotal);\n}",
                "stream": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code successfully applied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantApplyResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of results from the Instant Apply model"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "API key not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded (3 requests per minute)",
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "string"
                },
                "description": "Rate limit ceiling for the API key"
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "string"
                },
                "description": "Number of requests left for the time window"
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "string"
                },
                "description": "Time at which the rate limit resets"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/code/rank": {
      "post": {
        "description": "Assess the relevance of each file in your codebase to a user's query.",
        "servers": [
          {
            "url": "https://ranker.endpoint.relace.run"
          }
        ],
        "requestBody": {
          "description": "Query, codebase context, and token limit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeRerankerRequest"
              },
              "example": {
                "query": "Optimize the search function for better performance with large arrays",
                "codebase": [
                  {
                    "filename": "src/search.ts",
                    "code": "function findItem(array: Item[], targetId: string): Item | undefined {\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (item.id === targetId) {\n      return item;\n}\n}\n  return undefined;\n}"
                  },
                  {
                    "filename": "src/types.ts",
                    "code": "interface Item {\n  id: string;\n  value: string;\n  metadata?: Record<string, unknown>;\n}"
                  },
                  { 
                    "filename": "src/render.ts", 
                    "code": "function renderItems(items: Item[]): void {\\n  const container = document.getElementById('items-container');\\n  if (!container) return;\\n  \\n  container.innerHTML = '';\\n  \\n  for (const item of items) {\\n    const element = document.createElement('div');\\n    element.textContent = item.value;\\n    element.dataset.id = item.id;\\n    container.appendChild(element);\\n}\\n}"
                  }, 
                  { 
                    "filename": "src/styles.css", 
                    "code": ".container {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 20px;\\n}\\n\\n.header {\\n  background: #f5f5f5;\\n  padding: 1rem;\\n}"
                  }, 
                  { 
                    "filename": "src/constants.ts", 
                    "code": "export const APP_NAME = 'MyApp';\\nexport const VERSION = '1.0.0';\\nexport const MAX_ITEMS = 1000;"
                  }
                ],
                "token_limit": 100000
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Codebase reranked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CodeRerankerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "API key not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded (3 requests per minute)",
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "string"
                },
                "description": "Rate limit ceiling for the API key"
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "string"
                },
                "description": "Number of requests left for the time window"
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "string"
                },
                "description": "Time at which the rate limit resets"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v2/code/rank": {
      "post": {
        "description": "Enhanced version of the code ranker that provides relevance scores for each file in your codebase. Returns a detailed ranking with numerical scores indicating how relevant each file is to the query.",
        "servers": [
          {
            "url": "https://ranker.endpoint.relace.run"
          }
        ],
        "requestBody": {
          "description": "Query and codebase context for relevance scoring",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeRerankerRequest"
              },
              "example": {
                "query": "Optimize the search function for better performance with large arrays",
                "codebase": [
                  {
                    "filename": "src/search.ts",
                    "code": "function findItem(array: Item[], targetId: string): Item | undefined {\\n  for (let i = 0; i < array.length; i++) {\\n    const item = array[i];\\n    if (item.id === targetId) {\\n      return item;\\n}\\n}\\n  return undefined;\\n}"
                  }
                ],
                "token_limit": 100000
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Codebase reranked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2CodeRerankerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "API key not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded (3 requests per minute)",
            "headers": {
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "string"
                },
                "description": "Rate limit ceiling for the API key"
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "string"
                },
                "description": "Number of requests left for the time window"
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "string"
                },
                "description": "Time at which the rate limit resets"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "InstantApplyRequest": {
        "type": "object",
        "required": [
          "initialCode",
          "editSnippet"
        ],
        "properties": {
          "initialCode": {
            "type": "string",
            "description": "The original code that needs to be modified"
          },
          "editSnippet": {
            "type": "string",
            "description": "The code changes to be applied to the initial code"
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response back",
            "default": false
          },
          "relace-metadata": {
            "type": "object",
            "description": "Optional metadata for logging and tracking purposes.",
            "additionalProperties": true
          }
        }
      },
      "InstantApplyResponse": {
        "type": "object",
        "properties": {
          "mergedCode": {
            "type": "string",
            "description": "The merged code with the changes applied",
            "example": "function calculateTotal(items) {\n  let total = 0;\n  \n  for (const item of items) {\n    total += item.price * item.quantity;\n  }\n  \n  return total;\n}\n\nfunction applyDiscount(total, discountRules) {\n  let discountedTotal = total;\n\n  if (discountRules.percentOff) {\n    discountedTotal -= (total * discountRules.percentOff / 100);\n  }\n\n  if (discountRules.fixedAmount && discountRules.fixedAmount < discountedTotal) {\n    discountedTotal -= discountRules.fixedAmount;\n  }\n\n  return Math.max(0, discountedTotal);\n}"
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt",
                "example": 174
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion",
                "example": 145
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used",
                "example": 319
              }
            },
            "description": "Token usage information for the request"
          }
        }
      },
      "CodeFile": {
        "type": "object",
        "required": [
          "filename",
          "code"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "The name of the file including its path"
          },
          "code": {
            "type": "string",
            "description": "The content of the file"
          }
        }
      },
      "CodeRerankerRequest": {
        "type": "object",
        "required": [
          "query",
          "codebase",
          "token_limit"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The natural language query describing the problem to solve"
          },
          "codebase": {
            "type": "array",
            "description": "An array of files with their content, providing context for the query",
            "items": {
              "$ref": "#/components/schemas/CodeFile"
            }
          },
          "token_limit": {
            "type": "integer",
            "description": "Maximum token limit for the response",
            "default": 100000
          },
          "relace-metadata": {
            "type": "object",
            "description": "Optional metadata for logging and tracking purposes. Removed before forwarding to origin server.",
            "additionalProperties": true
          }
        }
      },
      "v1CodeRerankerResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "description": "Array of files ranked by relevance to the query",
            "example": [
              "src/search.ts",
              "src/styles.css",
              "src/render.ts",
              "src/constants.ts",
              "src/types.ts"
            ]
          },
          "numTokens": {
            "type": "integer",
            "description": "Number of tokens processed in the request",
            "example": 472
          }
        }
      },
      "v2CodeRerankerResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Array of files ranked by relevance to the query, with their scores",
            "items": {
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string",
                  "description": "The name of the file including its path"
                },
                "score": {
                  "type": "number",
                  "description": "The relevance score for this file (between 0 and 1)",
                  "format": "float"
                }
              },
              "required": ["filename", "score"]
            },
            "example": [
              {
                "filename": "src/search.ts",
                "score": 0.953125
              }
            ]
          },
          "numTokens": {
            "type": "integer",
            "description": "Number of tokens processed in the request",
            "example": 261
          }
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid JSON in request body"
          }
        }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Authorized header required"
          }
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Bad Request: Route not found"
          }
        }
      },
      "Error429": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Rate limit exceeded: Maximum 3 requests per minute allowed"
          }
        }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Error fetching from origin server"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "API key Authorization header using the Bearer scheme. Rate limiting applies for certain API keys (3 requests per minute)."
      }
    },
    "parameters": {
      "X-Relace-Headers": {
        "name": "X-Relace-*",
        "in": "header",
        "description": "Custom headers starting with X-Relace- prefix are captured for logging purposes",
        "schema": {
          "type": "string"
        },
        "required": false
      }
    }
  },
  "x-relace-proxy-info": {
    "description": "Requests are processed through a Cloudflare Worker that handles authentication, rate limiting, and request routing",
    "features": [
      "API key validation against Supabase database",
      "Rate limiting (3 requests per minute for rate-limited keys)",
      "Request distribution across multiple origin servers",
      "Usage tracking and logging to ClickHouse",
      "Optional Stripe usage-based billing"
    ],
    "cachingStrategy": "Auth and origin information are cached for performance",
    "loggingBehavior": "Request/response content is logged based on user preferences"
  }
}