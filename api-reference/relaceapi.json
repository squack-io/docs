{
  "openapi": "3.0.1",
  "info": {
    "title": "Code Manipulation API",
    "description": "API for applying code changes and ranking code solutions",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://instantapply.endpoint.relace.run",
      "description": "Code Apply Service"
    },
    {
      "url": "https://ranker.endpoint.relace.run",
      "description": "Code Rank Service"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/code/apply": {
      "post": {
        "summary": "Apply code changes",
        "description": "Applies suggested code edits to existing code",
        "operationId": "applyCodeChanges",
        "requestBody": {
          "description": "Initial code and edits to apply",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeApplyRequest"
              },
              "example": {
                "initialCode": "function calculateTotal(items) {\n  let total = 0;\n  \n  for (const item of items) {\n    total += item.price * item.quantity;\n  }\n  \n  return total;\n}",
                "editSnippet": "// ... keep existing code\n\nfunction applyDiscount(total, discountRules) {\n  let discountedTotal = total;\n  \n  if (discountRules.percentOff) {\n    discountedTotal -= (total * discountRules.percentOff / 100);\n  }\n  \n  if (discountRules.fixedAmount && discountRules.fixedAmount < discountedTotal) {\n    discountedTotal -= discountRules.fixedAmount;\n  }\n  \n  return Math.max(0, discountedTotal);\n}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code successfully applied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeApplyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/code/rank": {
      "post": {
        "summary": "Rank code solutions",
        "description": "Ranks code solutions based on a provided query and codebase context",
        "operationId": "rankCodeSolutions",
        "requestBody": {
          "description": "Query and codebase context for ranking",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeRankRequest"
              },
              "example": {
                "query": "Optimize the search function for better performance with large arrays",
                "codebase": [
                  {
                    "filename": "src/search.ts",
                    "code": "function findItem(array: Item[], targetId: string): Item | undefined {\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (item.id === targetId) {\n      return item;\n}\n}\n  return undefined;\n}"
                  },
                  {
                    "filename": "src/types.ts",
                    "code": "interface Item {\n  id: string;\n  value: string;\n  metadata?: Record<string, unknown>;\n}"
                  }
                ],
                "token_limit": 128000
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code solutions ranked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeRankResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CodeApplyRequest": {
        "type": "object",
        "required": [
          "initialCode",
          "editSnippet"
        ],
        "properties": {
          "initialCode": {
            "type": "string",
            "description": "The original code that needs to be modified"
          },
          "editSnippet": {
            "type": "string",
            "description": "The code changes to be applied to the initial code"
          }
        }
      },
      "CodeApplyResponse": {
        "type": "object",
        "properties": {
          "resultCode": {
            "type": "string",
            "description": "The merged code with the changes applied"
          },
          "success": {
            "type": "boolean",
            "description": "Indicates whether the code application was successful"
          }
        }
      },
      "CodeFile": {
        "type": "object",
        "required": [
          "filename",
          "code"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "The name of the file including its path"
          },
          "code": {
            "type": "string",
            "description": "The content of the file"
          }
        }
      },
      "CodeRankRequest": {
        "type": "object",
        "required": [
          "query",
          "codebase"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The natural language query describing the problem to solve"
          },
          "codebase": {
            "type": "array",
            "description": "An array of files with their content, providing context for the query",
            "items": {
              "$ref": "#/components/schemas/CodeFile"
            }
          },
          "token_limit": {
            "type": "integer",
            "description": "Maximum token limit for the response",
            "default": 128000
          }
        }
      },
      "RankedSolution": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "description": "Ranking score for this solution"
          },
          "solution": {
            "type": "string",
            "description": "The code solution"
          },
          "explanation": {
            "type": "string",
            "description": "Explanation of the solution approach"
          }
        }
      },
      "CodeRankResponse": {
        "type": "object",
        "properties": {
          "solutions": {
            "type": "array",
            "description": "Ranked code solutions",
            "items": {
              "$ref": "#/components/schemas/RankedSolution"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Indicates whether the ranking was successful"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "JWT Authorization header using the Bearer scheme"
      }
    }
  }
}